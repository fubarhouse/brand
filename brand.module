<?php

/**
 * Get the Brand machine name for the current entity/path.
 *
 * @return array
 *   An array of machine names associated
 *   to the current entity or path.
 */
function brand_get_machine_name() : array {
  $results = array();
  $weight = 20;
  $output = array();
  if (path_is_admin(current_path())) {
    return array();
  }
  $brands = new Brands(NULL, TRUE);
  foreach ($brands::$Brands as $Brand) {

    if ($node = menu_get_object()) {
      $nid = (int)$node->nid;

      // Book.
      if (module_exists('book')) {
        if (isset($node->book['bid'])) {
          if ((int)$node->book['bid'] === (int)$Brand->bid) {
            $results[$Brand->machine_name] = $Brand->machine_name;
          }
        }

        // Nodes.
        if (module_exists('node')) {

          // Let's quickly check if the content type was configured.
          if ($Brand->content_type !== 'Not selected' && $Brand->content_type === $node->type) {
            $results[$Brand->machine_name] = $Brand->machine_name;
          }

          $delimiter = preg_split('/\s+/', $Brand->path_visibility);

          foreach ($delimiter as $node_target) {

            // Look for "node/xxx" in the path_visibility field:
            if (FALSE !== strpos($node_target, "node/{$nid}", 0)) {
              $results[$Brand->machine_name] = $Brand->machine_name;
            }

            // Check if the current node alias is the node target.
            elseif ($node_target === current_path()) {
              $results[$Brand->machine_name] = $Brand->machine_name;
            }

            // Check if the current node path matches the node target.
            elseif (drupal_match_path(current_path(), $node_target)) {
              $results[$Brand->machine_name] = $Brand->machine_name;
            }

            // Check if the current node alias matches the node target.
            elseif (drupal_match_path(drupal_get_path_alias(), $node_target)) {
              $results[$Brand->machine_name] = $Brand->machine_name;
            }
          }
        }
      }

      // Taxonomy.
      if (module_exists('taxonomy')) {
        foreach ((array)field_info_instances('node', $node->type) as $field_name => $info) {
          foreach ((array)field_get_items('node', $node, $field_name) as $item) {
            if (is_array($item) && !empty($item['tid']) && (int)$Brand->tid === (int)$item['tid']) {
              $results[$Brand->machine_name] = $Brand->machine_name;
            }
          }
        }
      }
    }

    // Paths.
    $delimiter = preg_split('/\s+/', $Brand->path_visibility);
    foreach ($delimiter as $path_target) {
      $path_target = trim($path_target);
      if (!empty(trim($path_target))) {
        if (isset($_GET['destination']) && drupal_match_path($_GET['destination'], $path_target)) {
          $results[$Brand->machine_name] = $Brand->machine_name;
        } elseif (isset($_GET['q']) && drupal_match_path($_GET['q'], $path_target)) {
          $results[$Brand->machine_name] = $Brand->machine_name;
        }
      }
    }
  }

  ksort($results);
  return $results;
}

/**
 * Implements hook_custom_theme().
 *
 * @inheritdoc
 */
function brand_custom_theme() {
  $default_theme = variable_get('theme_default', NULL);
  $theme = variable_get('theme_default', NULL);
  $machine_names = brand_get_machine_name();
  $machine_name_count = 0;
  $weight = 20;
  foreach ($machine_names as $machine_name) {
    $brand = new Brand($machine_name);
    if ($brand->Check() === TRUE) {
      if (NULL !== $brand::$Brand->theme && $brand::$Brand->theme !== '' && $brand::$Brand->theme !== 'none') {
        $machine_name_count++;
        if ((int) $brand::$Brand->weight < $weight) {
          $b = $brand::$Brand;
          $theme = $brand::$Brand->theme;
          $weight = $brand::$Brand->weight;
          $mname = $brand::$Brand->machine_name;
        }
      }
    }
  }
  if ($machine_name_count > 1 && user_access('brand visibility')) {
    $mnames = implode($machine_names, ', ');
    $message_enabled = variable_get('brand_message_enabled', 0);
    $message_string = variable_get('brand_message_string', 0);
    if ((int) $message_enabled === 1) {
      // blah!
      $message_string = str_replace('[[brand]]',$mname, $message_string);
      $message_string = str_replace('[[brands]]',$mnames, $message_string);
      drupal_set_message($message_string, 'warning');
    }
  }
  // Let's double check that we're allowed to use the theme.
  $restriction = variable_get('brand_disable_checking', 0);
  if ((int) $restriction === 0) {
    $allowed_themes = brand_get_allowed_themes();
    foreach ($allowed_themes as $allowed_theme) {
      if ($allowed_theme === $theme) {
        return $theme;
      }
    }
    return $default_theme;
  }
  return $theme;
}

/**
 * Implements hook_menu().
 *
 * @inheritdoc
 */
function brand_menu() {
  $items = array();

  $Brands = new Brands(NULL, TRUE);
  foreach ($Brands::$Brands as $brand) {
    $items["admin/config/user-interface/brands/{$brand->machine_name}/"] = array(
      'title' => (string) $brand->title,
      'description' => "The main Brand page for the {$brand->machine_name} Brand.",
      'type' => MENU_NORMAL_ITEM,
      'access callback' => 'user_access',
      'access arguments' => array('brand visibility'),
    );
  }

  $items['admin/config/user-interface/brands/'] = array(
    'title' => 'Brands',
    'description' => 'A summary of all the latest entries of Brands',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access callback' => 'user_access',
    'access arguments' => array('brand visibility'),
  );

  $items['admin/config/user-interface/brands/add'] = array(
    'title' => 'New Brand',
    'description' => 'The form to create a new brand',
    'type' => MENU_LOCAL_ACTION,
    'page callback' => array('drupal_get_form'),
    'page arguments' => array('brand_add_form'),
    'access callback' => 'user_access',
    'access arguments' => array('brand creation'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/user-interface/brands/%/add'] = array(
    'title' => 'Add',
    'type' => MENU_LOCAL_ACTION,
    'description' => 'New entry',
    'page callback' => array('drupal_get_form'),
    'page arguments' => array('brand_edit_form'),
    'access callback' => 'user_access',
    'access arguments' => array('brand creation'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/user-interface/brands/%/delete'] = array(
    'title' => 'Delete',
    'type' => MENU_LOCAL_ACTION,
    'page callback' => array('drupal_get_form'),
    'page arguments' => array('brand_delete_form'),
    'access callback' => 'user_access',
    'access arguments' => array('brand removal'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/user-interface/brands/%/%'] = array(
    'title' => 'View a brand entry',
    'description' => '',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'user_access',
    'access arguments' => array('brand visibility'),
    'page callback' => array('drupal_get_form'),
    'page arguments' => array('brand_view_form'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/user-interface/brands/%/%/delete'] = array(
    'title' => 'Delete',
    'description' => 'Remove an entry from a brand.',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'user_access',
    'access arguments' => array('brand removal'),
    'page callback' => array('drupal_get_form'),
    'page arguments' => array('brand_delete_form'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/user-interface/brands/settings'] = array(
    'title' => 'Settings',
    'description' => '',
    'type' => MENU_LOCAL_TASK,
    'page callback' => array('drupal_get_form'),
    'page arguments' => array('brand_admin_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('brand settings'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 *
 * @inheritdoc
 */
function brand_permission() {
  return array(
    'brand settings' => array(
      'title' => t('access and modify brand settings.'),
      'description' => t('View and modify the Brand settings form.'),
    ),
    'brand creation' => array(
      'title' => t('create new brands and brand entries'),
      'description' => t('Access and submit forms which add information into the Brand module table.'),
    ),
    'brand removal' => array(
      'title' => t('remove brands and brand entries'),
      'description' => t('Access and submit forms which remove information from the Brand module table.'),
    ),
    'brand visibility' => array(
      'title' => t('view brands and brand entries'),
      'description' => t('Access and submit forms which add information into the Brand module table.'),
    ),
  );
}

/**
 * Get a list of themes configured for use.
 *
 * Themes can be controlled and restricted from the Brand forms,
 * this is controlled by an independent permission setting for
 * Administrators to delegate as necessary.
 *
 * @return array
 *   An array of theme names represented as the theme machine_name.
 */
function brand_get_allowed_themes() : array {
  $themes = list_themes();
  $configured_themes = variable_get('brand_allowed_themes', array());
  $results = array();
  foreach ((array) $configured_themes as $theme) {
    if (isset($themes[$theme])) {
      $results[] = $theme;
    }
  }
  return $results;
}

/**
 * Implements hook_views_api().
 *
 * @inheritdoc
 */
function brand_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'brand'),
  );
}

/**
 * Implements hook_views_pre_render().
 *
 * @inheritdoc
 */
function brand_views_pre_render(&$view) {
  // Let's make sure we're getting the right view.
  if ($view->base_table === 'brand') {
    // And, the correct display, as we only want to manipulate one.
    if ($view->current_display === 'all') {
      $newset = array();
      foreach ($view->result as $result) {
        $newset[$result->brand_machine_name] = $result;
      }
      $view->result = $newset;
    }
  }
}

/**
 * Implements hook_views_data().
 *
 * @inheritdoc
 */
function brand_views_data() {
  $table = array(
    'brand' => array(
      'table' => array(
        'group' => 'Brand',
        'base' => array(
          'field' => 'id',
          'title' => 'Brands',
          'help' => 'Table used for Brands',
        ),
      ),

      // Human readable name for the brand.
      'title' => array(
        'title' => t('Name'),
        'help' => t('The human-readable name for the brand.'),
        'field' => array(
          'click sortable' => TRUE,
        ),
        'filter' => array(
          'handler' => 'views_handler_filter_string',
        ),
        'sort' => array(
          'handler' => 'views_handler_sort',
        ),
        'argument' => array(
          'handler' => 'views_handler_argument_string',
        ),
      ),

      // Machine name.
      'machine_name' => array(
        'title' => t('Machine name'),
        'help' => t('The machine name for the brand, which acts like a unique identifier.'),
        'field' => array(
          'click sortable' => TRUE,
        ),
        'filter' => array(
          'handler' => 'views_handler_filter_string',
        ),
        'sort' => array(
          'handler' => 'views_handler_sort',
        ),
        'argument' => array(
          'handler' => 'views_handler_argument_string',
        ),
      ),

      // Date created.
      'date_created' => array(
        'title' => t('Date of creation'),
        'help' => t('The date each row was created.'),
        'field' => array(
          'handler' => 'views_handler_field_date',
          'click sortable' => TRUE,
        ),
        'filter' => array(
          'handler' => 'views_handler_filter_date',
        ),
        'sort' => array(
          'handler' => 'views_handler_sort',
        ),
      ),

      // Date created.
      'date_start' => array(
        'title' => t('Date of start'),
        'help' => t('The date the brand logic allows it to start.'),
        'field' => array(
          'handler' => 'views_handler_field_date',
          'click sortable' => TRUE,
        ),
        'filter' => array(
          'handler' => 'views_handler_filter_date',
        ),
        'sort' => array(
          'handler' => 'views_handler_sort',
        ),
      ),

      // Date created.
      'date_finish' => array(
        'title' => t('Date of finish'),
        'help' => t('The date the brand logic allows it to end.'),
        'field' => array(
          'handler' => 'views_handler_field_date',
          'click sortable' => TRUE,
        ),
        'filter' => array(
          'handler' => 'views_handler_filter_date',
        ),
        'sort' => array(
          'handler' => 'views_handler_sort',
        ),
      ),

      // Visibility.
      'path_visibility' => array(
        'title' => t('Visibility'),
        'help' => t('The paths to select for this brand.'),
        'field' => array(
          'click sortable' => TRUE,
        ),
        'filter' => array(
          'handler' => 'views_handler_filter_string',
        ),
        'sort' => array(
          'handler' => 'views_handler_sort',
        ),
        'argument' => array(
          'handler' => 'views_handler_argument_string',
        ),
      ),

      // Weight.
      'weight' => array(
        'title' => t('Weight'),
        'help' => t('The weight specified for this brand.'),
        'field' => array(
          'click sortable' => TRUE,
        ),
        'filter' => array(
          'handler' => 'views_handler_filter_numeric',
        ),
        'sort' => array(
          'handler' => 'views_handler_sort',
        ),
        'argument' => array(
          'handler' => 'views_handler_argument_numeric',
        ),
      ),

      // Description.
      'description' => array(
        'title' => t('Description'),
        'help' => t('The message associated with this change.'),
        'field' => array(
          'click sortable' => TRUE,
        ),
        'filter' => array(
          'handler' => 'views_handler_filter_string',
        ),
        'sort' => array(
          'handler' => 'views_handler_sort',
        ),
        'argument' => array(
          'handler' => 'views_handler_argument_string',
        ),
      ),

      // Date locking mechanism:
      'date_lock' => array(
        'title' => t('Date locking'),
        'help' => t('Determine if logic should prevent branding from finishing.'),
        'field' => array(
          'handler' => 'views_handler_field_boolean',
          'click sortable' => TRUE,
        ),
        'filter' => array(
          'handler' => 'views_handler_filter_boolean_operator',
          'label' => t('Does not expire?'),
          'type' => 'yes-no',
          'use equal' => TRUE,
        ),
        'sort' => array(
          'handler' => 'views_handler_sort',
        ),
        'argument' => array(
          'handler' => 'views_handler_argument',
        ),
      ),

      // Book:
      'bid' => array(
        'title' => t('Book'),
        'help' => t('The book selected for the entry for the brand.'),
        'field' => array(
          'handler' => 'brand_handler_bid',
          'click sortable' => TRUE,
        ),
        'filter' => array(
          'handler' => 'views_handler_filter_string',
        ),
        'sort' => array(
          'handler' => 'views_handler_sort',
        ),
        'argument' => array(
          'handler' => 'views_handler_argument_numeric',
        ),
      ),

      // Taxonomy:
      'tid' => array(
        'title' => t('Term'),
        'help' => t('The taxonomy term selected for the entry for the brand.'),
        'field' => array(
          'handler' => 'brand_handler_tid',
          'click sortable' => TRUE,
        ),
        'filter' => array(
          'handler' => 'views_handler_filter_string',
        ),
        'sort' => array(
          'handler' => 'views_handler_sort',
        ),
        'argument' => array(
          'handler' => 'views_handler_argument_numeric',
        ),
      ),

      // Role:
      'rid' => array(
        'title' => t('Role'),
        'help' => t('The user role selected for the entry for the brand.'),
        'field' => array(
          'handler' => 'views_handler_field_user_roles',
          'click sortable' => TRUE,
        ),
        'filter' => array(
          'handler' => 'views_handler_filter_user_roles',
        ),
        'sort' => array(
          'handler' => 'views_handler_sort',
        ),
        'argument' => array(
          'handler' => 'views_handler_argument_numeric',
        ),
      ),

      // User:
      'uid' => array(
        'title' => t('User'),
        'help' => t('The user that created the entry for the brand.'),
        'field' => array(
          'handler' => 'brand_handler_uid',
          'click sortable' => TRUE,
        ),
        'filter' => array(
          'handler' => 'views_handler_filter_string',
        ),
        'sort' => array(
          'handler' => 'views_handler_sort',
        ),
        'argument' => array(
          'handler' => 'views_handler_argument_user_uid',
        ),
      ),

      // Vocabulary:
      'vid' => array(
        'title' => t('Vocabulary'),
        'help' => t('The vocabulary for the entry for the brand.'),
        'field' => array(
          'handler' => 'brand_handler_vid',
          'click sortable' => TRUE,
        ),
        'filter' => array(
          'handler' => 'views_handler_filter_string',
        ),
        'sort' => array(
          'handler' => 'views_handler_sort',
        ),
        'argument' => array(
          'handler' => 'views_handler_argument_numeric',
        ),
      ),

    ),
  );

  $table['brand']['active_status'] = array(
    // The active status being compared to the current time.
    'title' => t('Active'),
    'help' => t('A boolean to show if the Brand will actually show based upon configuration.'),
    'real field' => 'machine_name',
    'field' => array(
      'click sortable' => TRUE,
      'handler' => 'brand_handler_active_status'
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
  );

  $table['brand']['theme_status'] = array(
    // The theme status which is attempting to be consumed.
    // Otherwise: is the user doing something they're allowed to?
    'title' => t('Theme access'),
    'help' => t('A simple checker which will identify if the configuration allows access to the configured theme.'),
    'real field' => 'machine_name',
    'field' => array(
      'click sortable' => TRUE,
      'handler' => 'brand_handler_theme_status'
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
  );

  return $table;
}

/**
 * Implements hook_views_default_views().
 *
 * @inheritdoc
 */
function brand_views_default_views() {

  $view = new view();
  $view->name = 'brands';
  $view->description = '';
  $view->tag = 'default';
  $view->base_table = 'brand';
  $view->human_name = 'Brands';
  $view->core = 7;
  $view->api_version = '3.0';
  $view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */

  /* Display: Master */
  $handler = $view->new_display('default', 'Master', 'default');
  $handler->display->display_options['title'] = 'Brands';
  $handler->display->display_options['hide_admin_links'] = TRUE;
  $handler->display->display_options['use_more_always'] = FALSE;
  $handler->display->display_options['access']['type'] = 'perm';
  $handler->display->display_options['access']['perm'] = 'brand visibility';
  $handler->display->display_options['cache']['type'] = 'none';
  $handler->display->display_options['query']['type'] = 'views_query';
  $handler->display->display_options['exposed_form']['type'] = 'basic';
  $handler->display->display_options['pager']['type'] = 'none';
  $handler->display->display_options['style_plugin'] = 'table';
  /* Field: UNIX Timestamp */
  $handler->display->display_options['fields']['date_created_1']['id'] = 'date_created_1';
  $handler->display->display_options['fields']['date_created_1']['table'] = 'brand';
  $handler->display->display_options['fields']['date_created_1']['field'] = 'date_created';
  $handler->display->display_options['fields']['date_created_1']['ui_name'] = 'UNIX Timestamp';
  $handler->display->display_options['fields']['date_created_1']['label'] = '';
  $handler->display->display_options['fields']['date_created_1']['exclude'] = TRUE;
  $handler->display->display_options['fields']['date_created_1']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['date_created_1']['date_format'] = 'custom';
  $handler->display->display_options['fields']['date_created_1']['custom_date_format'] = 'U';
  $handler->display->display_options['fields']['date_created_1']['second_date_format'] = 'rss';
  /* Field: Brand: Machine name */
  $handler->display->display_options['fields']['machine_name']['id'] = 'machine_name';
  $handler->display->display_options['fields']['machine_name']['table'] = 'brand';
  $handler->display->display_options['fields']['machine_name']['field'] = 'machine_name';
  $handler->display->display_options['fields']['machine_name']['label'] = '';
  $handler->display->display_options['fields']['machine_name']['exclude'] = TRUE;
  $handler->display->display_options['fields']['machine_name']['element_label_colon'] = FALSE;
  /* Field: Brand: Name */
  $handler->display->display_options['fields']['title']['id'] = 'title';
  $handler->display->display_options['fields']['title']['table'] = 'brand';
  $handler->display->display_options['fields']['title']['field'] = 'title';
  $handler->display->display_options['fields']['title']['alter']['alter_text'] = TRUE;
  $handler->display->display_options['fields']['title']['alter']['text'] = '[title]';
  $handler->display->display_options['fields']['title']['alter']['make_link'] = TRUE;
  $handler->display->display_options['fields']['title']['alter']['path'] = 'admin/config/user-interface/brands/[machine_name]';
  /* Field: Brand: Date of creation */
  $handler->display->display_options['fields']['date_created']['id'] = 'date_created';
  $handler->display->display_options['fields']['date_created']['table'] = 'brand';
  $handler->display->display_options['fields']['date_created']['field'] = 'date_created';
  $handler->display->display_options['fields']['date_created']['label'] = 'Updated';
  $handler->display->display_options['fields']['date_created']['date_format'] = 'short';
  $handler->display->display_options['fields']['date_created']['second_date_format'] = 'rss';
  /* Field: Brand: Date of start */
  $handler->display->display_options['fields']['date_start']['id'] = 'date_start';
  $handler->display->display_options['fields']['date_start']['table'] = 'brand';
  $handler->display->display_options['fields']['date_start']['field'] = 'date_start';
  $handler->display->display_options['fields']['date_start']['label'] = 'Starts';
  $handler->display->display_options['fields']['date_start']['date_format'] = 'short';
  $handler->display->display_options['fields']['date_start']['second_date_format'] = 'rss';
  /* Field: Brand: Date of finish */
  $handler->display->display_options['fields']['date_finish']['id'] = 'date_finish';
  $handler->display->display_options['fields']['date_finish']['table'] = 'brand';
  $handler->display->display_options['fields']['date_finish']['field'] = 'date_finish';
  $handler->display->display_options['fields']['date_finish']['label'] = 'Finishes';
  $handler->display->display_options['fields']['date_finish']['date_format'] = 'short';
  $handler->display->display_options['fields']['date_finish']['second_date_format'] = 'rss';
  /* Sort criterion: Brand: Date of creation */
  $handler->display->display_options['sorts']['date_created']['id'] = 'date_created';
  $handler->display->display_options['sorts']['date_created']['table'] = 'brand';
  $handler->display->display_options['sorts']['date_created']['field'] = 'date_created';

  /* Display: Page */
  $handler = $view->new_display('page', 'Page', 'all');
  $handler->display->display_options['defaults']['empty'] = FALSE;
  /* No results behavior: Global: Unfiltered text */
  $handler->display->display_options['empty']['area_text_custom']['id'] = 'area_text_custom';
  $handler->display->display_options['empty']['area_text_custom']['table'] = 'views';
  $handler->display->display_options['empty']['area_text_custom']['field'] = 'area_text_custom';
  $handler->display->display_options['empty']['area_text_custom']['empty'] = TRUE;
  $handler->display->display_options['empty']['area_text_custom']['content'] = '<p>Brands are small sub-themes which have specific logic to expose them during a given duration.</p>
<p>You can apply a brand using various components which make for good structural design, such as books, taxonomy terms or paths.</p>
<p>So why not create one using the link above?</p>';
  $handler->display->display_options['defaults']['fields'] = FALSE;
  /* Field: UNIX Timestamp */
  $handler->display->display_options['fields']['date_created_1']['id'] = 'date_created_1';
  $handler->display->display_options['fields']['date_created_1']['table'] = 'brand';
  $handler->display->display_options['fields']['date_created_1']['field'] = 'date_created';
  $handler->display->display_options['fields']['date_created_1']['ui_name'] = 'UNIX Timestamp';
  $handler->display->display_options['fields']['date_created_1']['label'] = '';
  $handler->display->display_options['fields']['date_created_1']['exclude'] = TRUE;
  $handler->display->display_options['fields']['date_created_1']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['date_created_1']['date_format'] = 'custom';
  $handler->display->display_options['fields']['date_created_1']['custom_date_format'] = 'U';
  $handler->display->display_options['fields']['date_created_1']['second_date_format'] = 'rss';
  /* Field: Brand: Machine name */
  $handler->display->display_options['fields']['machine_name']['id'] = 'machine_name';
  $handler->display->display_options['fields']['machine_name']['table'] = 'brand';
  $handler->display->display_options['fields']['machine_name']['field'] = 'machine_name';
  $handler->display->display_options['fields']['machine_name']['label'] = '';
  $handler->display->display_options['fields']['machine_name']['exclude'] = TRUE;
  $handler->display->display_options['fields']['machine_name']['element_label_colon'] = FALSE;
  /* Field: Brand: Name */
  $handler->display->display_options['fields']['title']['id'] = 'title';
  $handler->display->display_options['fields']['title']['table'] = 'brand';
  $handler->display->display_options['fields']['title']['field'] = 'title';
  $handler->display->display_options['fields']['title']['alter']['alter_text'] = TRUE;
  $handler->display->display_options['fields']['title']['alter']['text'] = '[title]';
  $handler->display->display_options['fields']['title']['alter']['make_link'] = TRUE;
  $handler->display->display_options['fields']['title']['alter']['path'] = 'admin/config/user-interface/brands/[machine_name]';
  /* Field: Brand: Date of creation */
  $handler->display->display_options['fields']['date_created']['id'] = 'date_created';
  $handler->display->display_options['fields']['date_created']['table'] = 'brand';
  $handler->display->display_options['fields']['date_created']['field'] = 'date_created';
  $handler->display->display_options['fields']['date_created']['label'] = 'Updated';
  $handler->display->display_options['fields']['date_created']['date_format'] = 'short';
  $handler->display->display_options['fields']['date_created']['second_date_format'] = 'rss';
  /* Field: Brand: Description */
  $handler->display->display_options['fields']['description']['id'] = 'description';
  $handler->display->display_options['fields']['description']['table'] = 'brand';
  $handler->display->display_options['fields']['description']['field'] = 'description';
  $handler->display->display_options['fields']['description']['label'] = 'Message';
  /* Field: Brand: Active */
  $handler->display->display_options['fields']['active_status']['id'] = 'active_status';
  $handler->display->display_options['fields']['active_status']['table'] = 'brand';
  $handler->display->display_options['fields']['active_status']['field'] = 'active_status';
  $handler->display->display_options['fields']['active_status']['alter']['text'] = 'Active';
  $handler->display->display_options['fields']['active_status']['empty'] = 'Inactive';
  $handler->display->display_options['fields']['active_status']['hide_alter_empty'] = FALSE;
  /* Field: Brand: Theme access */
  $handler->display->display_options['fields']['theme_status']['id'] = 'theme_status';
  $handler->display->display_options['fields']['theme_status']['table'] = 'brand';
  $handler->display->display_options['fields']['theme_status']['field'] = 'theme_status';
  $handler->display->display_options['fields']['theme_status']['label'] = 'Theme Access';
  $handler->display->display_options['fields']['theme_status']['alter']['text'] = 'Allowed';
  $handler->display->display_options['fields']['theme_status']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['theme_status']['empty'] = 'Not allowed';
  $handler->display->display_options['fields']['theme_status']['hide_alter_empty'] = FALSE;
  $handler->display->display_options['path'] = 'admin/config/user-interface/brands';
  $handler->display->display_options['menu']['type'] = 'normal';
  $handler->display->display_options['menu']['title'] = 'Brands';
  $handler->display->display_options['menu']['description'] = 'Configuration page for brands';
  $handler->display->display_options['menu']['weight'] = '0';
  $handler->display->display_options['menu']['name'] = 'management';
  $handler->display->display_options['menu']['context'] = 0;
  $handler->display->display_options['menu']['context_only_inline'] = 0;

  /* Display: Page */
  $handler = $view->new_display('page', 'Page', 'specific');
  $handler->display->display_options['defaults']['fields'] = FALSE;
  /* Field: UNIX Timestamp */
  $handler->display->display_options['fields']['date_created_1']['id'] = 'date_created_1';
  $handler->display->display_options['fields']['date_created_1']['table'] = 'brand';
  $handler->display->display_options['fields']['date_created_1']['field'] = 'date_created';
  $handler->display->display_options['fields']['date_created_1']['ui_name'] = 'UNIX Timestamp';
  $handler->display->display_options['fields']['date_created_1']['label'] = '';
  $handler->display->display_options['fields']['date_created_1']['exclude'] = TRUE;
  $handler->display->display_options['fields']['date_created_1']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['date_created_1']['date_format'] = 'custom';
  $handler->display->display_options['fields']['date_created_1']['custom_date_format'] = 'U';
  $handler->display->display_options['fields']['date_created_1']['second_date_format'] = 'rss';
  /* Field: Brand: Machine name */
  $handler->display->display_options['fields']['machine_name']['id'] = 'machine_name';
  $handler->display->display_options['fields']['machine_name']['table'] = 'brand';
  $handler->display->display_options['fields']['machine_name']['field'] = 'machine_name';
  $handler->display->display_options['fields']['machine_name']['label'] = '';
  $handler->display->display_options['fields']['machine_name']['exclude'] = TRUE;
  $handler->display->display_options['fields']['machine_name']['element_label_colon'] = FALSE;
  /* Field: Brand: Name */
  $handler->display->display_options['fields']['title']['id'] = 'title';
  $handler->display->display_options['fields']['title']['table'] = 'brand';
  $handler->display->display_options['fields']['title']['field'] = 'title';
  $handler->display->display_options['fields']['title']['alter']['alter_text'] = TRUE;
  $handler->display->display_options['fields']['title']['alter']['text'] = '[title]';
  $handler->display->display_options['fields']['title']['alter']['make_link'] = TRUE;
  $handler->display->display_options['fields']['title']['alter']['path'] = 'admin/config/user-interface/brands/[machine_name]/[date_created_1]';
  /* Field: Brand: Date of creation */
  $handler->display->display_options['fields']['date_created']['id'] = 'date_created';
  $handler->display->display_options['fields']['date_created']['table'] = 'brand';
  $handler->display->display_options['fields']['date_created']['field'] = 'date_created';
  $handler->display->display_options['fields']['date_created']['label'] = 'Date';
  $handler->display->display_options['fields']['date_created']['date_format'] = 'short';
  $handler->display->display_options['fields']['date_created']['second_date_format'] = 'rss';
  /* Field: Brand: Description */
  $handler->display->display_options['fields']['description']['id'] = 'description';
  $handler->display->display_options['fields']['description']['table'] = 'brand';
  $handler->display->display_options['fields']['description']['field'] = 'description';
  $handler->display->display_options['fields']['description']['label'] = 'Message';
  /* Field: Brand: User */
  $handler->display->display_options['fields']['uid']['id'] = 'uid';
  $handler->display->display_options['fields']['uid']['table'] = 'brand';
  $handler->display->display_options['fields']['uid']['field'] = 'uid';
  $handler->display->display_options['fields']['uid']['label'] = 'Credit';
  $handler->display->display_options['defaults']['arguments'] = FALSE;
  /* Contextual filter: Brand: Machine name */
  $handler->display->display_options['arguments']['machine_name']['id'] = 'machine_name';
  $handler->display->display_options['arguments']['machine_name']['table'] = 'brand';
  $handler->display->display_options['arguments']['machine_name']['field'] = 'machine_name';
  $handler->display->display_options['arguments']['machine_name']['default_action'] = 'not found';
  $handler->display->display_options['arguments']['machine_name']['exception']['value'] = '';
  $handler->display->display_options['arguments']['machine_name']['default_argument_type'] = 'raw';
  $handler->display->display_options['arguments']['machine_name']['default_argument_options']['index'] = '4';
  $handler->display->display_options['arguments']['machine_name']['summary']['number_of_records'] = '0';
  $handler->display->display_options['arguments']['machine_name']['summary']['format'] = 'default_summary';
  $handler->display->display_options['arguments']['machine_name']['summary_options']['items_per_page'] = '25';
  $handler->display->display_options['arguments']['machine_name']['limit'] = '0';
  $handler->display->display_options['path'] = 'admin/config/user-interface/brands/%';
  $handler->display->display_options['menu']['title'] = 'Brand dashboard';
  $handler->display->display_options['menu']['weight'] = '0';
  $handler->display->display_options['menu']['context'] = 0;
  $handler->display->display_options['menu']['context_only_inline'] = 0;

  $views[$view->name] = $view;
  return $views;
}

/**
 * Get an associative array of terms.
 *
 * @param int $vid
 *   The optional vocabulary ID to choose.
 *
 * @return array
 *   An associative array of terms.
 */
function brand_form_get_terms($vid = NULL) {
  // Get and store a key => value strucured array with
  // the VID containing the term name and term id.
  $vocabularies = taxonomy_get_vocabularies();
  $results = array();
  foreach ((array) $vocabularies as $vocabulary) {
    $terms = taxonomy_get_tree($vocabulary->vid);
    foreach ($terms as $term) {
      $results[$vocabulary->vid][0] = 'Not selected';
      $results[$vocabulary->vid][$term->tid] = $term->name;
    }
  }
  if (!empty($results)) {
    if (NULL !== $vid && (int) $vid > 0) {
      return $results[$vid];
    }
    return $results;
  }
  else {
    return array();
  }
}

/**
 * Change the available taxonomy terms after changing the vocabulary.
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form state array.
 *
 * @return string
 *   The rendered form component for the term component.
 */
function brand_form_vocabulary_callback($form, &$form_state) {
  $arguments = explode('/', $_GET['q']);
  $all_terms = brand_form_get_terms();
  $selectable_terms = $all_terms[$form_state['input']['vocabulary']];
  if ((int) $form_state['input']['vocabulary'] > 0) {
    $form['taxonomy']['term']['#options'] = $selectable_terms;
    form_set_value($form['taxonomy']['term'], '0', $form_state);
  }
  else {
    form_set_value($form['taxonomy']['term'], '0', $form_state);
    $form['taxonomy']['term']['#options'] = array(
      0 => 'Vocabulary not selected.',
    );
  }
  $form_state['rebuild'] = TRUE;
  return render($form['taxonomy']['term']);
}

/**
 * Cancel button for form.
 */
function brand_form_cancel() {
  $arguments = explode('/', $_GET['q']);
  $machine_name = $arguments[4];
  if (is_numeric((int) $arguments[5])) {
    $timestamp = (int) $arguments[5];
  }
  if (isset($timestamp) && isset($machine_name)) {
    drupal_goto("/admin/config/user-interface/brands/{$machine_name}/");
  }
  elseif (isset($machine_name)) {
    drupal_goto("/admin/config/user-interface/brands/");
  }
}

/**
 * Returns a standardized $form object.
 *
 * To be used as a parameter to array_merge().
 * This may or may not include options , values
 * or default values for each field.
 */
function brand_get_universal_form() {
  $form = array();
  $theme_restrictions = (int) variable_get('brand_disable_checking', 0);
  if ($theme_restrictions === 1) {
    $all_themes = list_themes();
    $themes = array(
      'none' => 'None selected',
    );
    foreach ($all_themes as $name => $theme) {
      if ((int) $theme->status === 1) {
        $themes[$name] = $name;
      }
    }
  } else if ($theme_restrictions === 0) {
    $all_themes = brand_get_allowed_themes();
    $drupal_themes = list_themes();
    $themes = array(
      'none' => 'None selected',
    );
    foreach ($all_themes as $name => $theme) {
      if ((int) $drupal_themes[$theme]->status === 1) {
        $themes[$theme] = $theme;
      }
    }
  }

  if (module_exists('book')) {
    $book_raw = book_get_books();
    $books = array(
      0 => 'None',
    );
    foreach ($book_raw as $key => $value) {
      $books[$key] = $book_raw[$key]['title'];
    }
  }

  if (module_exists('taxonomy')) {
    $vocabs = taxonomy_get_vocabularies();
    $vocabularies = array(
      0 => 'Not selected',
    );
    foreach ((array) $vocabs as $vocabulary) {
      $vocabularies[$vocabulary->vid] = $vocabulary->name;
    }
  }

  /* Declare the vertical tab groups. */

  $form['vtabs'] = array(
    '#type' => 'vertical_tabs',
  );

  $form['basic'] = array(
    '#type' => 'fieldset',
    '#title' => t('General'),
    '#group' => 'vtabs',
  );

  $form['assets'] = array(
    '#type' => 'fieldset',
    '#title' => t('Assets'),
    '#group' => 'vtabs',
  );

  $form['dates'] = array(
    '#type' => 'fieldset',
    '#title' => t('Dates'),
    '#group' => 'vtabs',
  );

  $form['types'] = array(
    '#type' => 'fieldset',
    '#title' => t('Content type'),
    '#group' => 'vtabs',
  );

  if (module_exists('book')) {
    $form['book'] = array(
      '#type' => 'fieldset',
      '#title' => t('Book'),
      '#group' => 'vtabs',
    );
  }

  $form['role'] = array(
    '#type' => 'fieldset',
    '#title' => t('Role'),
    '#group' => 'vtabs',
  );

  if (module_exists('taxonomy')) {
    $form['taxonomy'] = array(
      '#type' => 'fieldset',
      '#title' => t('Taxonomy'),
      '#group' => 'vtabs',
    );
  }

  $form['visibility'] = array(
    '#type' => 'fieldset',
    '#title' => t('Visibility'),
    '#group' => 'vtabs',
  );

  /* Declare fields. */

  $form['basic']['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Branding name'),
    '#description' => t("This is the human-readable name associated to the brand.<br />It's only used on administration pages to identify the brand."),
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => TRUE,
  );

  $form['basic']['machine_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Machine name'),
    '#description' => t('The name which Drupal will associate to this brand.<br />This value must be unique, as it is used to discover if the brand should be displayed and to show information in the administration pages.'),
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => TRUE,
  );

  $form['basic']['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#description' => t('The message associated to this change, which could include details about what changed, who asked for the changes and why the changes are occuring.'),
    '#rows' => 5,
    '#cols' => 5,
    '#maxlength' => 500,
    '#wysiwyg' => FALSE,
    '#format' => 'plain_text',
    '#required' => TRUE,
  );

  $restriction = variable_get('brand_disable_checking', 0);
  if ((int) $restriction === 0) {
    $form['assets']['theme_description'] = array(
      '#type' => 'markup',
      '#markup' => '<p>If the desired theme, or no theme is available, please contact your administrator to either open up access to specific themes or to remove restrictions based upon the themes you are allowed to choose. Any selected themes will cease to work in the event your administrator imposes changes which deem the selected theme to be unavailable.</p><p>In addition to this, the list of available themes are also limited to enabled themes - you may wish to speak to your administrator about this in the event you cannot find the theme you need.</p>',
    );
  }
  else {
    $form['assets']['theme_description'] = array(
      '#type' => 'markup',
      '#markup' => '<p>Your administrator has not imposed theme-specific restrictions to the brand module for this website. The list of available themes is only limited to enabled themes - you may wish to speak to your administrator about this in the event you cannot find the theme you need.</p>',
    );
  }

  $form['assets']['theme'] = array(
    '#type' => 'select',
    '#title' => 'Theme',
    '#description' => t('Which theme do you wish to associate to this brand?'),
    '#required' => FALSE,
    '#default_value' => 'none',
    '#options' => $themes,
  );

  $form['assets']['weight'] = array(
    '#type' => 'select',
    '#title' => 'Weight',
    '#description' => t('Specify a weight, which will be used to determine if a particular brand should rule out including conflicting brands.'),
    '#required' => FALSE,
  );
  $options = array();
  for ($i = -20; $i <= 20; $i++) {
    $options[(int) $i] = $i;
  };
  $form['assets']['weight']['#options'] = $options;
  $form['assets']['weight']['#default_value'] = 0;

  $date = new DateTime();
  $now = $date->getTimestamp();

  $form['dates']['date_created'] = array(
    '#type' => 'textfield',
    '#title' => t('Creation date'),
    '#description' => t('The timestamp associated to this entry, be it the first entry of a new brand or any subsequent changes.<br />This value represents the timestamp for when this form was generated.'),
    '#required' => TRUE,
    '#disabled' => TRUE,
    '#access' => FALSE,
    '#default_value' => $now,
  );

  $form['dates']['date_start'] = array(
    '#type' => 'date',
    '#title' => t('Start date'),
    '#description' => t('The date in which this brand will become available.<br /><strong>Note</strong>: This will be used in the UNIX timestamp format based upon the configured server time.<br /><strong>Note</strong>: Caches could still prevent the change from happening when expected.'),
    '#required' => TRUE,
  );

  $form['dates']['date_finish'] = array(
    '#type' => 'date',
    '#title' => t('Finish date'),
    '#description' => t('The date in which this brand will stop being available.<br /><strong>Note</strong>: This will be used in the UNIX timestamp format based upon the configured server time.<br /><strong>Note</strong>: Caches could still prevent the change from happening when expected.'),
    '#required' => FALSE,
  );

  $form['dates']['date_lock'] = array(
    '#type' => 'checkbox',
    '#title' => 'Prevent brand expiration',
    '#description' => t('Instead of stopping the availability of a brand, you can continue it indefinitely (until configured otherwise) by checking this option.'),
    '#default_value' => 1,
  );

  $types = node_type_get_types();
  $content_types = array(
    0 => 'Not selected',
  );
  foreach ($types as $type) {
    $content_types[$type->type] = $type->type;
  }

  $form['types']['type'] = array(
    '#title' => 'Content type',
    '#type' => 'select',
    '#description' => t('Although not the best of practices, you can choose to apply a given brand to a content type.'),
    '#options' => $content_types,
  );

  if (module_exists('book')) {
    $form['book']['bid'] = array(
      '#type' => 'select',
      '#title' => t('Book'),
      '#description' => t('Apply the branding to a given book - which will change the theme on every page in the book outline.'),
      '#options' => $books,
    );
  }

  $form['role']['rid'] = array(
    '#type' => 'select',
    '#title' => 'User access',
    '#description' => t('Allow the brand to show for the given user role (anonymous or otherwise).'),
    '#options' => user_roles(),
  );

  if (module_exists('taxonomy')) {
    $form['taxonomy']['vocabulary'] = array(
      '#type' => 'select',
      '#title' => 'Select a taxonomy',
      '#description' => t('Choose a vocabulary to filter the term selection input.<br />Choosing a vocabulary has no bearing on the validation checkers which control the display/logic of a brand.'),
      '#options' => $vocabularies,
      '#ajax' => array(
        'callback' => 'brand_form_vocabulary_callback',
        'wrapper' => 'view-display-dropdown',
      ),
    );

    $form['taxonomy']['term'] = array(
      '#type' => 'select',
      '#title' => 'Term',
      '#description' => t('Apply the branding to all content tagged with this term.'),
      '#prefix' => '<div id="view-display-dropdown">',
      '#suffix' => '</div>',
      '#options' => array(
        0 => 'Not selected',
      ),
    );
  }

  $form['visibility']['paths'] = array(
    '#type' => 'textarea',
    '#title' => t('Paths'),
    '#description' => t('Manually enter one or more paths (optionally using globs) to show the branding on.<br /><br />Example:<br /><br />node/1<br />node/2<br />resources/*'),
    '#size' => 60,
    '#maxlength' => 500,
    '#wysiwyg' => TRUE,
    '#format' => 'full_html',
  );

  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  $form['cancel_button'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#submit' => array('brand_form_cancel'),
    '#limit_validation_errors' => array(),
  );

  $form['#pre_render'][] = 'vertical_tabs_form_pre_render';

  return $form;
}

/**
 * Implements hook_form().
 *
 * @inheritdoc
 */
function brand_add_form($form, $form_state) {
  return array_merge($form, brand_get_universal_form());
}

/**
 * Implements hook_form_submit().
 *
 * @inheritdoc
 */
function brand_add_form_submit($form, $form_state) {

  global $user;
  $title = (isset($form_state['input']['title'])) ? $form_state['input']['title'] : $form_state['values']['title'];
  $brand = new Brand($form_state['values']['machine_name']);
  $start = new DateTime($form_state['values']['date_start']['year'] . '-' .  $form_state['values']['date_start']['month'] . '-' . $form_state['values']['date_start']['day']);
  $finish = new DateTime($form_state['values']['date_finish']['year'] . '-' . $form_state['values']['date_finish']['month'] . '-' . $form_state['values']['date_finish']['day']);
  $options = array(
    'title' => $form_state['values']['title'],
    'machine_name' => $form_state['values']['machine_name'],
    'description' => $form_state['values']['description'],
    'path_visibility' => $form_state['values']['paths'],
    'content_type' => $form_state['values']['type'],
    'theme' => $form_state['values']['theme'],
    'weight' => $form_state['values']['weight'],
    'date_created' => $form_state['values']['date_created'],
    'date_start' => $start->getTimestamp(),
    'date_finish' => $finish->getTimestamp(),
    'date_lock' => $form_state['values']['date_lock'],
    'bid' => (int) $form_state['values']['bid'],
    'rid' => (int) $form_state['values']['rid'],
    'tid' => (int) $form_state['values']['term'],
    'uid' => $user->uid,
    'vid' => (int) $form_state['values']['vocabulary'],
  );
  $brand->add($form_state['values']['machine_name'], $options);

  menu_rebuild();
  drupal_set_message("Sucessfully created brand '{$title}'");
  drupal_goto('/admin/config/user-interface/brands');
}

/**
 * Implements hook_form_validate().
 *
 * @inheritdoc
 */
function brand_add_form_validate($form, $form_state) {
  $machine_name = strtolower($form_state['values']['machine_name']);
  if (FALSE !== strpos($form_state['values']['machine_name'], ' ')) {
    form_set_error('machine_name', 'Machine name cannot contain spaces.');
  }
  $results = new Brand($machine_name, NULL);
  if (FALSE !== $results::$Raw) {
    form_set_error('machine_name', 'Machine name is already taken.');
  }
  if (FALSE !== strpos($form_state['values']['machine_name'], ' ')) {
    form_set_error('machine_name', 'Machine name cannot contain spaces.');
  }
  if (FALSE !== strpos($form_state['values']['machine_name'], 'page')) {
    form_set_error('machine_name', 'Machine name cannot contain the term "page".');
  }
  if (FALSE !== strpos($form_state['values']['machine_name'], 'node')) {
    form_set_error('machine_name', 'Machine name cannot contain the term "node".');
  }
}

/**
 * Implements hook_form().
 *
 * @inheritdoc
 */
function brand_delete_form($form, $form_state) {
  $arguments = explode('/', $_GET['q']);
  if (count($arguments) >= 4) {
    $machine_name = $arguments[4];
    if (count($arguments) >= 6 && $arguments[6] === 'delete') {
      $timestamp = $arguments[5];
    }

    $form['disclaimer'] = array(
      '#type' => 'markup',
    );
    if (isset($timestamp)) {
      $form['disclaimer']['#markup'] = "<p>Are you absolutely sure you wish to proceed with the following?</p><ul><li>Delete record of the brand identified by machine name '{$machine_name}' with matching creation timestamp of '{$timestamp}'</li></li></ul><p>This action is not reversible.</p></p>";
    }
    else {
      $form['disclaimer']['#markup'] = "<p>Are you absolutely sure you wish to proceed with the following?</p><ul><li>Delete all records of the brand identified by machine name '{$machine_name}'</li></li></ul><p>This action is not reversible.</p></p>";
    }
    $form['submit']['no'] = array(
      '#type' => 'submit',
      '#value' => 'No',
      '#submit' => array('brand_form_delete_item_cancel'),
      '#limit_validation_errors' => array(),
    );
    $form['submit']['yes'] = array(
      '#type' => 'submit',
      '#value' => 'Yes',
    );
  }
  return $form;
}

/**
 * Implements hook_form_submit().
 *
 * @inheritdoc
 */
function brand_delete_form_submit($form, $form_state) {
  $arguments = explode('/', $_GET['q']);
  $machine_name = $arguments[4];
  if (count($arguments) >= 6 && $arguments[6] === 'delete') {
    $timestamp = $arguments[5];
    $brand = new Brand($machine_name, $timestamp);
    $brand->remove($timestamp);
    drupal_goto('/admin/config/user-interface/brands/' . $machine_name);
  }
  else {
    $brand = new Brand($machine_name, NULL);
    $brand->remove();
    drupal_goto('/admin/config/user-interface/brands/');
  }
}

/**
 * Cancel button for delete item form.
 */
function brand_form_delete_item_cancel() {
  $arguments = explode('/', $_GET['q']);
  $machine_name = $arguments[4];
  if (is_numeric((int) $arguments[5])) {
    $timestamp = (int) $arguments[5];
  }
  if (isset($timestamp, $machine_name)) {
    drupal_goto("/admin/config/user-interface/brands/{$machine_name}/{$timestamp}");
  }
}

/**
 * Implements hook_form().
 *
 * @inheritdoc
 */
function brand_edit_form($form, $form_state) {
  $arguments = explode('/', $_SERVER['REQUEST_URI']);
  $machine_name = $arguments[5];
  $brands = new Brand($machine_name);
  $brand = $brands::$Brand;
  $terms = brand_form_get_terms($brand->vid);
  $start_date = getdate($brand->date_start);
  $finish_date = getdate($brand->date_finish);

  $form = brand_get_universal_form();
  $form['basic']['title']['#value'] = $brand->title;
  $form['basic']['machine_name']['#value'] = $brand->machine_name;
  $form['basic']['machine_name']['#disabled'] = TRUE;
  $form['basic']['machine_name']['#access'] = FALSE;
  $form['types']['type']['#value'] = $brand->content_type;
  $form['assets']['theme']['#value'] = $brand->theme;
  $form['dates']['date_start']['#value'] = array(
    'year' => $start_date['year'],
    'month' => $start_date['mon'],
    'day' => $start_date['mday'],
  );
  $form['dates']['date_finish']['#value'] = array(
    'year' => $finish_date['year'],
    'month' => $finish_date['mon'],
    'day' => $finish_date['mday'],
  );
  $form['dates']['date_lock']['#value'] = $brand->date_lock;
  $form['book']['bid']['#value'] = $brand->bid;
  $form['role']['rid']['#value'] = $brand->rid;
  $form['taxonomy']['vocabulary']['#value'] = $brand->vid;
  if ((int) $brand->vid > 0) {
    $form['taxonomy']['term']['#options'] = $terms[$brand->vid];
  }
  if ((int) $brand->tid > 0) {
    $form['taxonomy']['term']['#value'] = $brand->tid;
  }
  $form['visibility']['paths']['#value'] = $brand->path_visibility;

  return $form;
}

/**
 * Implements hook_form_submit().
 *
 * @inheritdoc
 */
function brand_edit_form_submit($form, $form_state) {
  global $user;
  $brand = new Brand($form_state['values']['machine_name']);
  $start_date = (isset($form_state['input']['date_start'])) ? new DateTime($form_state['input']['date_start']['year'] . '-' .  $form_state['input']['date_start']['month'] . '-' . $form_state['input']['date_start']['day']) : new DateTime($form_state['values']['date_start']['year'] . '-' .  $form_state['values']['date_start']['month'] . '-' . $form_state['values']['date_start']['day']);
  $finish_date = (isset($form_state['input']['date_finish'])) ? new DateTime($form_state['input']['date_finish']['year'] . '-' .  $form_state['input']['date_finish']['month'] . '-' . $form_state['input']['date_finish']['day']) : new DateTime($form_state['values']['date_finish']['year'] . '-' .  $form_state['values']['date_finish']['month'] . '-' . $form_state['values']['date_finish']['day']);
  $title = (isset($form_state['input']['title'])) ? $form_state['input']['title'] : $form_state['values']['title'];
  $machine_name = (isset($form_state['input']['machine_name'])) ? $form_state['input']['machine_name'] : $form_state['values']['machine_name'];
  $options = array(
    'title' => isset($form_state['input']['title']) ? $form_state['input']['title'] : $form_state['values']['title'],
    'machine_name' => isset($form_state['input']['machine_name']) ? $form_state['input']['machine_name'] : $form_state['values']['machine_name'],
    'description' => isset($form_state['input']['description']) ? $form_state['input']['description'] : $form_state['values']['description'],
    'content_type' => isset($form_state['input']['type']) ? $form_state['input']['type'] : $form_state['values']['type'],
    'theme' => isset($form_state['input']['theme']) ? $form_state['input']['theme'] : $form_state['values']['theme'],
    'weight' => isset($form_state['input']['weight']) ? $form_state['input']['weight'] : $form_state['values']['weight'],
    'date_created' => isset($form_state['input']['date_created']) ? $form_state['input']['date_created'] : $form_state['values']['date_created'],
    'date_start' => $start_date->getTimestamp(),
    'date_finish' => $finish_date->getTimestamp(),
    'date_lock' => isset($form_state['input']['date_lock']) ? $form_state['input']['date_lock'] : $form_state['values']['date_lock'],
    'bid' => isset($form_state['input']['bid']) ? $form_state['input']['bid'] : $form_state['values']['bid'],
    'rid' => isset($form_state['input']['rid']) ? $form_state['input']['rid'] : $form_state['values']['rid'],
    'tid' => isset($form_state['input']['term']) ? $form_state['input']['term'] : $form_state['values']['term'],
    'uid' => $user->uid,
    'vid' => isset($form_state['input']['vocabulary']) ? $form_state['input']['vocabulary'] : $form_state['values']['vocabulary'],
    'path_visibility' => isset($form_state['input']['paths']) ? $form_state['input']['paths'] : $form_state['values']['paths'],
  );
  $brand->add($form_state['values']['machine_name'], $options);

  drupal_set_message("Sucessfully updated brand '{$title}'");
  drupal_goto("/admin/config/user-interface/brands/{$machine_name}");
}

/**
 * Implements hook_form_validate().
 *
 * @inheritdoc
 */
function brand_edit_form_validate($form, $form_state) {
  // @TODO: Find out if nothing has changed, and report a form error if needed.
}

/**
 * Remove submit function
 */
function brand_admin_settings_form_remove($form, &$form_state) {
  $delta_remove = $form_state['triggering_element']['#parents'][2];
  $k = array_search($delta_remove, $form_state['field_deltas']);
  unset($form_state['field_deltas'][$k]);

  $form_state['rebuild'] = TRUE;
  drupal_get_messages();
}
/**
 * Remove callback.
 */
function brand_admin_settings_form_callback($form, &$form_state) {
  return $form['field_container']['themes'];
}

/**
 * Add submit function.
 */
function brand_admin_settings_form_add($form, &$form_state) {
  $form_state['field_deltas'][] = count($form_state['field_deltas']) > 1 ? max($form_state['field_deltas']) + 1 : 1;
  $form_state['rebuild'] = TRUE;
}

function brand_admin_settings_form_submit($form, $form_state) {
  $inputs = $form_state['input']['field_container']['themes'];
  $dd = isset($form_state['input']['field_container']['themes']['disabled_themes']) ? $form_state['input']['field_container']['themes']['disabled_themes'] : $form_state['values']['field_container']['themes']['disabled_themes'];
  $results = array();
  foreach ($inputs as $input) {
    if (isset($input['theme'])) {
      $results[] = $input['theme'];
    }
  }
  variable_set('brand_allowed_themes', $results);
  variable_set('brand_disable_checking', $dd);

  $message_enabled = isset($form_state['input']['field_container']['messages']['message_enabled']) ? $form_state['input']['field_container']['messages']['message_enabled'] : $form_state['values']['field_container']['messages']['message_enabled'];
  $message_string = isset($form_state['input']['field_container']['messages']['message_string']) ? $form_state['input']['field_container']['messages']['message_string'] : $form_state['values']['field_container']['messages']['message_string'];
  variable_set('brand_message_enabled', $message_enabled);
  variable_set('brand_message_string', $message_string);
}

function brand_admin_settings_form($form, &$form_state) {
  $form['field_container'] = [
    '#type' => 'container',
    '#weight' => 80,
    '#tree' => TRUE,
  ];

  $form['field_container']['messages']['message_enabled'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable conflict message?'),
    '#description' => t('Enable warning messages when multiple brands are detected?'),
    '#default_value' => variable_get('brand_message_enabled', 0),
  ];

  $form['field_container']['messages']['message_string'] = [
    '#type' => 'textarea',
    '#title' => t('Message text.'),
    '#description' => t('The template message to use when multiple brands are detected for use.<br /><ul><li>You can use \'[[brand]]\' to replace that text with the machine name being used.</li><li>You can use \'[[brands]]\' to replace that text with all detected machine names for use.</li></ul>'),
    '#default_value' => variable_get('brand_message_string', 'Multiple Brands have detected for use, the current brand in use uses the machine name [[brand]].<br />It was selected from [[brands]] by sorting the weight first, and then by alphabetical sorting.<br />If this is intentional, you can ignore this message.'),
  ];

  // Get current values and quickly sanitize the indexes.
  $values = variable_get('brand_allowed_themes', array());
  $processed_values = array();
  foreach ($values as $value) {
    $processed_values[] = $value;
  }
  if (count($processed_values) - 1 < 0) {
    $count = 0;
  }
  else {
    $count = count($processed_values) - 1;
  }

  $form_state['field_deltas'] = isset($form_state['field_deltas']) ? $form_state['field_deltas'] : range(0, $count);
  $_themes = list_themes();
  $themes = array('' => '');
  foreach ($_themes as $theme) {
    $themes[$theme->name] = $theme->name;
  }

  $form['field_container']['themes'] = [
    '#title' => 'Allowed themes',
    '#description' => t('Themes configured for allowed use on this module are declared below.'),
    '#type' => 'fieldset',
    '#prefix' => '<div id="js-ajax-elements-wrapper">',
    '#suffix' => '</div>',
  ];

  $form['field_container']['themes']['disabled_themes'] = [
    '#type' => 'checkbox',
    '#title' => t('Disable theme control'),
    '#description' => t('Disable the mechanism which restricts the available themes.'),
    '#default_value' => variable_get('brand_disable_checking', 0),
  ];

  foreach ($form_state['field_deltas'] as $delta) {

    $field_value = isset($processed_values[$delta]) ? $processed_values[$delta] : NULL;

    $form['field_container']['themes'][$delta] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['container-inline'],
      ],
      '#tree' => TRUE,
    ];

    $form['field_container']['themes'][$delta]['theme'] = [
      '#type' => 'select',
      '#title' => 'Allowed theme #' . $delta,
      '#default_value' => NULL,
      '#options' => $themes,
    ];

    if (isset($themes[$field_value])) {
      $form['field_container']['themes'][$delta]['theme']['#value'] = $themes[$field_value];
    }

    $form['field_container']['themes'][$delta]['remove'] = [
      '#type' => 'submit',
      '#value' => t('Remove'),
      '#submit' => ['brand_admin_settings_form_remove'],
      '#ajax' => [
        'callback' => 'brand_admin_settings_form_callback',
        'wrapper' => 'js-ajax-elements-wrapper',
      ],
      '#weight' => 50,
      '#attributes' => [
        'class' => ['button-small'],
      ],
      '#name' => 'remove_theme_' . $delta,
    ];
  }

  // Submit buttons.
  $form['field_container']['themes']['add'] = [
    '#type' => 'submit',
    '#value' => t('Add one more'),
    '#submit' => ['brand_admin_settings_form_add'],
    '#ajax' => [
      'callback' => 'brand_admin_settings_form_callback',
      'wrapper' => 'js-ajax-elements-wrapper',
    ],
    '#weight' => 100,
  ];

  $form['submit'] = [
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#submit' => ['brand_admin_settings_form_submit'],
    '#weight' => 150,
  ];

  return $form;
}

/**
 * Implements hook_form().
 *
 * @inheritdoc
 */
function brand_view_form($form, $form_state) {
  $arguments = explode('/', $_GET['q']);
  $machine_name = $arguments[4];
  $timestamp = $arguments[5];
  $brand = new Brand($machine_name, $timestamp);
  if ($brand::$Brand === NULL) {
    drupal_goto('/admin/config/user-interface/brands');
  }
  $form = array_merge($form, brand_get_universal_form());
  $term = taxonomy_term_load($brand::$Brand->tid);

  $form['basic']['title']['#value'] = $brand::$Brand->title;
  $form['basic']['machine_name']['#value'] = $brand::$Brand->machine_name;
  $form['basic']['description']['#value'] = $brand::$Brand->description;
  $form['types']['type']['#value'] = $brand::$Brand->content_type;
  $form['assets']['theme']['#value'] = $brand::$Brand->theme;
  $form['assets']['weight']['#value'] = $brand::$Brand->weight;
  $start_date = getdate($brand::$Brand->date_start);
  $form['dates']['date_start']['#value'] = array(
    'year' => $start_date['year'],
    'month' => $start_date['mon'],
    'day' => $start_date['mday'],
  );
  $finish_date = getdate($brand::$Brand->date_finish);
  $form['dates']['date_finish']['#value'] = array(
    'year' => $finish_date['year'],
    'month' => $finish_date['mon'],
    'day' => $finish_date['mday'],
  );
  $form['dates']['date_lock']['#value'] = $brand::$Brand->date_lock;
  $form['book']['bid']['#value'] = $brand::$Brand->bid;
  $form['role']['rid']['#value'] = $brand::$Brand->rid;
  $form['taxonomy']['vocabulary']['#value'] = $brand::$Brand->vid;
  if ((int) $brand::$Brand->tid > 0) {
    $form['taxonomy']['term']['#options'] = array(
      $term->tid => $term->name,
    );
    $form['taxonomy']['term']['#value'] = $term->name;
  }
  $form['visibility']['paths']['#value'] = $brand::$Brand->path_visibility;

  $form['basic']['title']['#disabled'] = TRUE;
  $form['basic']['machine_name']['#disabled'] = TRUE;
  $form['basic']['machine_name']['#access'] = FALSE;
  $form['basic']['description']['#disabled'] = TRUE;

  $form['types']['type']['#disabled'] = TRUE;
  $form['assets']['theme']['#disabled'] = TRUE;
  $form['assets']['weight']['#disabled'] = TRUE;

  $form['dates']['date_created']['#disabled'] = TRUE;
  $form['dates']['date_start']['#disabled'] = TRUE;
  $form['dates']['date_finish']['#disabled'] = TRUE;
  $form['dates']['date_lock']['#disabled'] = TRUE;

  $form['book']['bid']['#disabled'] = TRUE;
  $form['role']['rid']['#disabled'] = TRUE;
  $form['taxonomy']['vocabulary']['#disabled'] = TRUE;
  $form['taxonomy']['term']['#disabled'] = TRUE;
  $form['visibility']['paths']['#disabled'] = TRUE;

  $form['delete_button'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#submit' => array('brand_form_delete_item'),
    '#limit_validation_errors' => array(),
  );

  unset($form['submit_button']);

  return $form;
}

/**
 * Implements hook_form_submit().
 *
 * @inheritdoc
 */
function brand_view_form_submit($form, $form_state) {

}

/**
 * Implements hook_form_validate().
 *
 * @inheritdoc
 */
function brand_view_form_validate($form, $form_state) {

}

/**
 * Delete button for brand item.
 */
function brand_form_delete_item() {
  $arguments = explode('/', $_GET['q']);
  $machine_name = $arguments[4];
  if (is_numeric((int) $arguments[5])) {
    $timestamp = (int) $arguments[5];
    drupal_goto("/admin/config/user-interface/brands/{$machine_name}/{$timestamp}/delete");
  }
}

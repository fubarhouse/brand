<?php

/**
 * Implements hook_views_api().
 *
 * @inheritdoc
 */
function brand_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'brand') . '/lib/views',
  );
}

/**
 * Get the Brand machine name for the current entity/path.
 *
 * @return array
 *   An array of machine names associated
 *   to the current entity or path.
 */
function brand_get_machine_name() : array {
    $results = array();
    if (path_is_admin(current_path())) {
      return array();
    }
    $brands = new Brands(NULL, TRUE);
    foreach ($brands::$Brands as $brand) {
      $Brand = $brand::$Brand;
        if ($node = menu_get_object()) {
          $nid = (int) $node->nid;

          // Book.
          if (module_exists('book')) {
            if (isset($node->book['bid'])) {
                if ((int) $node->book['bid'] === (int) $Brand->bid) {
                  $results[$Brand->machine_name] = $Brand->machine_name;
                }
            }

          // Nodes.
          if (module_exists('node')) {
            $delimiter = preg_split('/\s+/', $Brand->path_visibility);

            foreach ($delimiter as $node_target) {

              // Look for "node/xxx" in the path_visibility field:
              if (FALSE !== strpos($node_target, "node/{$nid}", 0)) {
                $results[$Brand->machine_name] = $Brand->machine_name;
              }

              // Check if the current node alias is the node target.
              if ($node_target === current_path()) {
                $results[$Brand->machine_name] = $Brand->machine_name;
              }

              // Check if the current node path matches the node target.
              if (drupal_match_path(current_path(), $node_target)) {
                $results[$Brand->machine_name] = $Brand->machine_name;
              }

              // Check if the current node alias matches the node target.
              if (drupal_match_path(drupal_get_path_alias(), $node_target)) {
                $results[$Brand->machine_name] = $Brand->machine_name;
              }
            }
          }
        }

        // Taxonomy.
        if (module_exists('taxonomy')) {
          foreach ((array) field_info_instances('node', $node->type) as $field_name => $info) {
            foreach ((array) field_get_items('node', $node, $field_name) as $item) {
              if (is_array($item) && !empty($item['tid']) && (int) $Brand->tid === (int) $item['tid']) {
                $results[$Brand->machine_name] = $Brand->machine_name;
              }
            }
          }
        }
      }

      // Paths.
      $delimiter = preg_split('/\s+/', $Brand->path_visibility);
      foreach ($delimiter as $path_target) {
        $path_target = trim($path_target);
        if (!empty(trim($path_target))) {
          if (isset($_GET['destination']) && drupal_match_path($_GET['destination'], $path_target)) {
            $results[$Brand->machine_name] = $Brand->machine_name;
          } elseif (isset($_GET['q']) && drupal_match_path($_GET['q'], $path_target)) {
            $results[$Brand->machine_name] = $Brand->machine_name;
          }
        }
      }
    }
    return $results;
}

/**
 * hook_brand_alter
 *
 * @inheritdoc
 */
function validation_brand_alter(&$variables) {
    $variables['machine_name'] = 'hhhddd';
}

/**
 * Implements hook_custom_theme().
 *
 * @inheritdoc
 */
function brand_custom_theme()  {
  $theme = variable_get('theme_default', NULL);
  $machine_names = brand_get_machine_name();
  foreach ($machine_names as $machine_name) {
    $brand = new Brand($machine_name);
    if ($brand->Check() === TRUE) {
      if (NULL !== $brand::$Brand->theme && $brand::$Brand->theme !== '' && $brand::$Brand->theme !== 'none') {
        return $brand::$Brand->theme;
      }
    }
  }
  return $theme;
}

/**
 * Implements hook_menu().
 *
 * @inheritdoc
 */
function brand_menu() {
  $items = array();

  $items['admin/config/user-interface/brands/add'] = array(
    'title' => 'New Brand',
    'description' => '',
    'type' => MENU_LOCAL_ACTION,
    'page callback' => array('drupal_get_form'),
    'page arguments' => array('brand_add_form'),
    'access callback' => TRUE,
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/user-interface/brands/%'] = array(
    'title' => 'Brand Administration',
    'description' => 'The administration page for a single brand.',
  );
  $items['admin/config/user-interface/brands/%/add'] = array(
    'title' => 'Add',
    'type' => MENU_LOCAL_ACTION,
    'description' => '',
    'page callback' => array('drupal_get_form'),
    'page arguments' => array('brand_edit_form'),
    'access callback' => TRUE,
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/user-interface/brands/%/delete'] = array(
    'title' => 'Delete',
    'type' => MENU_LOCAL_ACTION,
    'description' => '',
    'access callback' => TRUE,
  );
  $items['admin/config/user-interface/brands/%/%'] = array(
    'title' => 'View',
    'description' => '',
    'page callback' => array('drupal_get_form'),
    'page arguments' => array('brand_view_form'),
    'access callback' => TRUE,
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  return $items;
}

/**
 * Implements hook_init().
 *
 * @inheritdoc
 */
function brand_init() {
  module_load_include('inc', 'brand', 'lib/views');

  module_load_include('inc', 'brand', 'lib/form_common');
  module_load_include('inc', 'brand', 'lib/form_add');
  module_load_include('inc', 'brand', 'lib/form_edit');
  module_load_include('inc', 'brand', 'lib/form_view');
  module_load_include('inc', 'brand', 'lib/menu');
}

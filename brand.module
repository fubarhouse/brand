<?php

require_once 'lib/form_common.inc';
require_once 'lib/form_add.inc';
require_once 'lib/form_delete.inc';
require_once 'lib/form_edit.inc';
require_once 'lib/form_settings.inc';
require_once 'lib/form_view.inc';
require_once 'lib/views.inc';

/**
 * Implements hook_views_api().
 *
 * @inheritdoc
 */
function brand_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'brand') . '/lib/views',
  );
}

/**
 * Get the Brand machine name for the current entity/path.
 *
 * @return array
 *   An array of machine names associated
 *   to the current entity or path.
 */
function brand_get_machine_name() : array {
  $results = array();
  $weight = 20;
  $output = array();
  if (path_is_admin(current_path())) {
    return array();
  }
  $brands = new Brands(NULL, TRUE);
  foreach ($brands::$Brands as $Brand) {

    if ($node = menu_get_object()) {
      $nid = (int)$node->nid;

      // Book.
      if (module_exists('book')) {
        if (isset($node->book['bid'])) {
          if ((int)$node->book['bid'] === (int)$Brand->bid) {
            $results[$Brand->machine_name] = $Brand->machine_name;
          }
        }

        // Nodes.
        if (module_exists('node')) {
          $delimiter = preg_split('/\s+/', $Brand->path_visibility);

          foreach ($delimiter as $node_target) {

            // Look for "node/xxx" in the path_visibility field:
            if (FALSE !== strpos($node_target, "node/{$nid}", 0)) {
              $results[$Brand->machine_name] = $Brand->machine_name;
            }

            // Check if the current node alias is the node target.
            elseif ($node_target === current_path()) {
              $results[$Brand->machine_name] = $Brand->machine_name;
            }

            // Check if the current node path matches the node target.
            elseif (drupal_match_path(current_path(), $node_target)) {
              $results[$Brand->machine_name] = $Brand->machine_name;
            }

            // Check if the current node alias matches the node target.
            elseif (drupal_match_path(drupal_get_path_alias(), $node_target)) {
              $results[$Brand->machine_name] = $Brand->machine_name;
            }
          }
        }
      }

      // Taxonomy.
      if (module_exists('taxonomy')) {
        foreach ((array)field_info_instances('node', $node->type) as $field_name => $info) {
          foreach ((array)field_get_items('node', $node, $field_name) as $item) {
            if (is_array($item) && !empty($item['tid']) && (int)$Brand->tid === (int)$item['tid']) {
              $results[$Brand->machine_name] = $Brand->machine_name;
            }
          }
        }
      }
    }

    // Paths.
    $delimiter = preg_split('/\s+/', $Brand->path_visibility);
    foreach ($delimiter as $path_target) {
      $path_target = trim($path_target);
      if (!empty(trim($path_target))) {
        if (isset($_GET['destination']) && drupal_match_path($_GET['destination'], $path_target)) {
          $results[$Brand->machine_name] = $Brand->machine_name;
        } elseif (isset($_GET['q']) && drupal_match_path($_GET['q'], $path_target)) {
          $results[$Brand->machine_name] = $Brand->machine_name;
        }
      }
    }
  }

  ksort($results);
  return $results;
}

/**
 * Implements hook_custom_theme().
 *
 * @inheritdoc
 */
function brand_custom_theme() {
  $default_theme = variable_get('theme_default', NULL);
  $theme = variable_get('theme_default', NULL);
  $machine_names = brand_get_machine_name();
  $machine_name_count = 0;
  $weight = 20;
  foreach ($machine_names as $machine_name) {
    $brand = new Brand($machine_name);
    if ($brand->Check() === TRUE) {
      if (NULL !== $brand::$Brand->theme && $brand::$Brand->theme !== '' && $brand::$Brand->theme !== 'none') {
        $machine_name_count++;
        if ((int) $brand::$Brand->weight < $weight) {
          $b = $brand::$Brand;
          $theme = $brand::$Brand->theme;
          $weight = $brand::$Brand->weight;
          $mname = $brand::$Brand->machine_name;
        }
      }
    }
  }
  if ($machine_name_count > 1 && user_access('brand visibility')) {
    $mnames = implode($machine_names, ', ');
    drupal_set_message("Multiple Brands have detected for use, the current brand in use uses the machine name '{$mname}'.<br />It was selected from [{$mnames}] by sorting the weight first, and then by alphabetical sorting.<br />If this is intentional, you can ignore this message. ", 'warning', FALSE);
  }
  // Let's double check that we're allowed to use the theme.
  $restriction = variable_get('brand_disable_checking', 0);
  if ((int) $restriction === 0) {
    $allowed_themes = brand_get_allowed_themes();
    foreach ($allowed_themes as $allowed_theme) {
      if ($allowed_theme === $theme) {
        return $theme;
      }
    }
    return $default_theme;
  }
  return $theme;
}

/**
 * Implements hook_menu().
 *
 * @inheritdoc
 */
function brand_menu() {
  $items = array();

  $Brands = new Brands(NULL, TRUE);
  foreach ($Brands::$Brands as $brand) {
    $items["admin/config/user-interface/brands/{$brand->machine_name}/"] = array(
      'title' => (string) $brand->title,
      'description' => "The main Brand page for the {$brand->machine_name} Brand.",
      'type' => MENU_NORMAL_ITEM,
      'access callback' => 'user_access',
      'access arguments' => array('brand visibility'),
    );
  }

  $items['admin/config/user-interface/brands/'] = array(
    'title' => 'Brands',
    'description' => 'A summary of all the latest entries of Brands',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/user-interface/brands/add'] = array(
    'title' => 'New Brand',
    'description' => 'The form to create a new brand',
    'type' => MENU_LOCAL_ACTION,
    'page callback' => array('drupal_get_form'),
    'page arguments' => array('brand_add_form'),
    'access callback' => 'user_access',
    'access arguments' => array('brand creation'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/user-interface/brands/%/add'] = array(
    'title' => 'Add',
    'type' => MENU_LOCAL_ACTION,
    'description' => 'New entry',
    'page callback' => array('drupal_get_form'),
    'page arguments' => array('brand_edit_form'),
    'access callback' => 'user_access',
    'access arguments' => array('brand creation'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/user-interface/brands/%/delete'] = array(
    'title' => 'Delete',
    'type' => MENU_LOCAL_ACTION,
    'page callback' => array('drupal_get_form'),
    'page arguments' => array('brand_delete_form'),
    'access callback' => 'user_access',
    'access arguments' => array('brand removal'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/user-interface/brands/%/%'] = array(
    'title' => 'View a brand entry',
    'description' => '',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'user_access',
    'access arguments' => array('brand visibility'),
    'page callback' => array('drupal_get_form'),
    'page arguments' => array('brand_view_form'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/user-interface/brands/%/%/delete'] = array(
    'title' => 'Delete',
    'description' => 'Remove an entry from a brand.',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'user_access',
    'access arguments' => array('brand removal'),
    'page callback' => array('drupal_get_form'),
    'page arguments' => array('brand_view_form'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/user-interface/brands/settings'] = array(
    'title' => 'Settings',
    'description' => '',
    'type' => MENU_LOCAL_TASK,
    'page callback' => array('drupal_get_form'),
    'page arguments' => array('brand_admin_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('brand settings'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 *
 * @inheritdoc
 */
function brand_permission() {
  return array(
    'brand settings' => array(
      'title' => t('access and modify brand settings.'),
      'description' => t('View and modify the Brand settings form.'),
    ),
    'brand creation' => array(
      'title' => t('create new brands and brand entries'),
      'description' => t('Access and submit forms which add information into the Brand module table.'),
    ),
    'brand removal' => array(
      'title' => t('remove brands and brand entries'),
      'description' => t('Access and submit forms which remove information from the Brand module table.'),
    ),
    'brand visibility' => array(
      'title' => t('view brands and brand entries'),
      'description' => t('Access and submit forms which add information into the Brand module table.'),
    ),
  );
}

/**
 * Get a list of themes configured for use.
 *
 * Themes can be controlled and restricted from the Brand forms,
 * this is controlled by an independent permission setting for
 * Administrators to delegate as necessary.
 *
 * @return array
 *   An array of theme names represented as the theme machine_name.
 */
function brand_get_allowed_themes() : array {
  $themes = list_themes();
  $configured_themes = variable_get('brand_allowed_themes', array());
  $results = array();
  foreach ((array) $configured_themes as $theme) {
    if (isset($themes[$theme])) {
      $results[] = $theme;
    }
  }
  return $results;
}

<?php

/**
 * @file
 * Installation file for the Brand module.
 */

/**
 * Implements hook_enable().
 *
 * @inheritdoc
 */
function brand_enable() {
  cache_clear_all();
  if (NULL === variable_get('brand_allowed_themes', NULL)) {
    variable_set('brand_allowed_themes', '');
  }
  if (0 === variable_get('brand_allowed_themes', 0)) {
    variable_set('brand_disable_checking', 0);
  }
  $user_roles = user_roles();
  foreach ($user_roles as $role_id => $user_role) {
    if ($user_role === 'administrator') {
      user_role_grant_permissions($role_id, array(
        'brand settings',
        'brand creation',
        'brand removal',
        'brand visibility',
      ));
    }
  }
  cache_clear_all();
}

 /**
  * Implements hook_uninstall().
  *
  * @inheritdoc
  */
function brand_uninstall() {
  db_drop_table('brand');
  variable_del('brand_allowed_themes');
  variable_del('brand_disable_checking');
  variable_del('brand_allowed_themes');
  variable_del('brand_disable_checking');
}

/**
 * Implements hook_schema().
 *
 * @inheritdoc
 */
function brand_schema() {
  $schema['brand'] = array(
    'description' => 'Data associated to the brand module.',
    'fields' => array(
      'id' => array(
        'description' => 'Unique identifier for the row',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'The human-readable name for the brand.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'machine_name' => array(
        'description' => 'The machine name for the brand.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'A commit message which describes this change.',
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
      ),
      'date_created' => array(
        'description' => 'UNIX timestamp of when this row was created.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
        'default' => 0,
      ),
      'date_lock' => array(
        'description' => 'Ignore date expiration.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'date_start' => array(
        'description' => 'UNIX timestamp of the start time/date.',
        'type' => 'int',
        'size' => 'big',
        'not null' => FALSE,
        'default' => 0,
      ),
      'date_finish' => array(
        'description' => 'UNIX timestamp of the finish time/date.',
        'type' => 'int',
        'size' => 'big',
        'not null' => FALSE,
        'default' => 0,
      ),
      'theme' => array(
        'description' => 'The theme to use.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'content_type' => array(
        'description' => 'The configured content type for the brand to use.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'description' => 'The weight for this brand.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'path_visibility' => array(
        'description' => 'A list of targets manually selected to inherit functionality.',
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'bid' => array(
        'description' => 'The configured book ID.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'rid' => array(
        'description' => 'The configured role ID.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'tid' => array(
        'description' => 'The configured term ID.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => 'The configured user ID.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'vid' => array(
        'description' => 'The configured vocabulary ID.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
  );
  return $schema;
}

/**
 * The configured content type for the brand to use.
 */
function brand_update_7001() {
  $spec = array(
    'description' => 'The configured content type for the brand to use.',
    'type' => 'varchar',
    'length' => '255',
    'not null' => TRUE,
    'default' => '',
  );
  if (!db_field_exists('brand', 'content_type')) {
    db_add_field('brand', 'content_type', $spec);
  }
}
